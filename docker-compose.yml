services:
  database:
    image: postgres:15
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: supersecurepassword
      POSTGRES_DB: usuariosdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin_user -d usuariosdb" ]
      interval: 10s
      timeout: 5s
      retries: 6
  
  user-service:
    build: ./servicio-usuario
    container_name: user-service
    restart: unless-stopped
    environment:
      # Rutas internas dentro del contenedor donde montamos las llaves
      - PUBLIC_KEY_PATH=/app/keys/public-key.pem
      - PRIVATE_KEY_PATH=/app/keys/private-key.pem      # URL del data-service para comunicaciÃ³n entre microservicios
      - DATA_SERVICE_URL=http://data-service:8082/api/users
      - AUTH_SERVICE_URL=http://data-service:8082/api/auth
    volumes:
      - ./keys:/app/keys:ro
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - data-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 6

  data-service:
    build: ./servicio-datos
    container_name: data-service
    restart: unless-stopped
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: admin_user
      DB_PASSWORD: supersecurepassword
      DB_NAME: usuariosdb
    depends_on:
      - database
    ports:
      - "8082:8082"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 6

  notification-service:
    build: ./servicio-notificaciones
    container_name: notification-service
    restart: unless-stopped
    env_file:
      - ./servicio-notificaciones/.env
    ports:
      - "8083:8083"
    networks:
      - app-network
    depends_on:
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CREATE_TOPICS: "user-events:1:1:86400000,notifications:1:1:86400000"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8081:8080"   # Externo 8081 -> Interno 8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - app-network




networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data:
