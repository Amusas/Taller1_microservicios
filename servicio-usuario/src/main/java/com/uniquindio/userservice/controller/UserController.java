package com.uniquindio.userservice.controller;

import com.uniquindio.userservice.dto.PaginatedUserResponse;
import com.uniquindio.userservice.dto.UserRegistration;
import com.uniquindio.userservice.dto.UserResponse;
import com.uniquindio.userservice.dto.UserUpdateRequest;
import com.uniquindio.userservice.service.interfaces.UserService;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;

/**
 * Controlador REST para la gesti√≥n de usuarios del sistema.
 * 
 * <p>Esta clase expone endpoints HTTP para realizar operaciones CRUD (Create, Read, Update, Delete)
 * sobre usuarios. Implementa las mejores pr√°cticas RESTful incluyendo c√≥digos de estado HTTP
 * apropiados, headers de ubicaci√≥n para recursos creados, y validaci√≥n de entrada.</p>
 * 
 * <p>El controlador utiliza anotaciones de validaci√≥n de Jakarta para asegurar la integridad
 * de los datos de entrada y proporciona logging detallado para auditor√≠a y debugging.</p>
 * 
 * <p><strong>Caracter√≠sticas principales:</strong></p>
 * <ul>
 *   <li>Validaci√≥n autom√°tica de DTOs de entrada</li>
 *   <li>Respuestas HTTP est√°ndar con c√≥digos de estado apropiados</li>
 *   <li>Headers de ubicaci√≥n para recursos creados/actualizados</li>
 *   <li>Logging estructurado con emojis para mejor legibilidad</li>
 *   <li>Paginaci√≥n para listas de usuarios</li>
 * </ul>
 * 
 * <p><strong>Seguridad:</strong> Algunos endpoints pueden requerir autenticaci√≥n y autorizaci√≥n
 * dependiendo de la implementaci√≥n del servicio subyacente.</p>
 * 
 * @author Andres Felipe Rendon
 * @version 1.0.0
 * @see UserService
 * @see UserRegistration
 * @see UserResponse
 * @see UserUpdateRequest
 * @see PaginatedUserResponse
 * @see ResponseEntity
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("api/v1/users")
@Slf4j
public class UserController {

    /**
     * Servicio de negocio para la gesti√≥n de usuarios.
     */
    private final UserService userService;

    /**
     * Registra un nuevo usuario en el sistema.
     *
     * <p>Este endpoint recibe un objeto {@link UserRegistration}, lo valida y lo
     * pasa al servicio para crear un nuevo usuario. Si la operaci√≥n es exitosa,
     * devuelve el recurso creado junto con la ubicaci√≥n en el header <code>Location</code>.</p>
     * 
      * <p><strong>Flujo de la operaci√≥n:</strong></p>
 * <ol>
 *   <li>Validaci√≥n autom√°tica del DTO de entrada</li>
 *   <li>Delegaci√≥n al servicio de negocio</li>
 *   <li>Construcci√≥n de la URI de ubicaci√≥n</li>
 *   <li>Respuesta con c√≥digo 201 (Created) y header Location</li>
 * </ol>
     * 
     * <p><strong>Validaciones:</strong> El DTO se valida autom√°ticamente usando las
     * anotaciones de validaci√≥n de Jakarta definidas en {@link UserRegistration}.</p>
     *
     * @param userRegistration DTO con la informaci√≥n del nuevo usuario a registrar
     * @return {@link ResponseEntity} que contiene el usuario creado y el header Location
     *         con la URI del recurso creado
     * @throws jakarta.validation.ConstraintViolationException si la validaci√≥n del DTO falla
     * @see UserRegistration
     * @see UserResponse
     * @see ResponseEntity#created(URI)
     */
    @PostMapping
    public ResponseEntity<UserResponse> registerUser(@RequestBody @Valid UserRegistration userRegistration) {
        log.info("Solicitud recibida para registrar usuario: {}", userRegistration.email());

        UserResponse userResponse = userService.registerUser(userRegistration);

        URI location = ServletUriComponentsBuilder
                .fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(userResponse.id())
                .toUri();

        log.info("Usuario registrado exitosamente: id={}, email={}", userResponse.id(), userResponse.email());
        return ResponseEntity.created(location).body(userResponse);
    }

    /**
     * Recupera una lista paginada de usuarios del sistema.
     * 
     * <p>Este endpoint permite consultar usuarios de forma paginada, lo que es especialmente
     * √∫til para aplicaciones que manejan grandes vol√∫menes de usuarios. La paginaci√≥n
     * comienza desde la p√°gina 1 y permite configurar el tama√±o de p√°gina.</p>
     * 
      * <p><strong>Par√°metros de paginaci√≥n:</strong></p>
 * <ul>
 *   <li><strong>page:</strong> N√∫mero de p√°gina (comienza en 1, no en 0)</li>
 *   <li><strong>size:</strong> Tama√±o de la p√°gina (n√∫mero de elementos por p√°gina)</li>
 * </ul>
     * 
     * <p><strong>Validaciones:</strong> Ambos par√°metros deben ser n√∫meros positivos.
     * Si no se proporcionan, se utilizan valores por defecto (p√°gina 1, tama√±o 10).</p>
     * 
     * <p><strong>Nota de seguridad:</strong> Este endpoint puede requerir permisos de
     * administrador dependiendo de la implementaci√≥n del servicio.</p>
     *
     * @param page N√∫mero de p√°gina a consultar (m√≠nimo 1, por defecto 1)
     * @param size Tama√±o de la p√°gina (m√≠nimo 1 y m√°ximo 100, por defecto 10)
     * @return {@link ResponseEntity} que contiene la lista paginada de usuarios
     * @throws jakarta.validation.ConstraintViolationException si los par√°metros de paginaci√≥n
     *         no son n√∫meros positivos
     * @see PaginatedUserResponse
     * @see ResponseEntity#ok(Object)
     */
    @GetMapping
    public ResponseEntity<PaginatedUserResponse> getUsers(
            @RequestParam(defaultValue = "1") @Positive(message = "La p√°gina debe ser un n√∫mero positivo") int page,
            @RequestParam(defaultValue = "10") @Positive(message = "El tama√±o debe ser un n√∫mero positivo") int size) {

        log.info("üìã Consultando usuarios - P√°gina: {}, Tama√±o: {}", page, size);
        PaginatedUserResponse response = userService.getUsers(page, size);
        log.info("‚úÖ Total de usuarios recuperados: {}", response.totalItems());
        return ResponseEntity.ok(response);
    }

    /**
     * Consulta la informaci√≥n detallada de un usuario espec√≠fico por su identificador √∫nico.
     * 
     * <p>Este endpoint permite obtener la informaci√≥n completa de un usuario espec√≠fico
     * utilizando su ID. Es √∫til para mostrar perfiles de usuario, verificar informaci√≥n
     * antes de actualizaciones, o consultar datos para operaciones administrativas.</p>
     * 
     * <p><strong>Seguridad y autorizaci√≥n:</strong> Este endpoint puede requerir que el
     * usuario autenticado sea el propietario de la cuenta o tenga permisos de administrador,
     * dependiendo de la implementaci√≥n del servicio subyacente.</p>
     * 
     * <p><strong>Manejo de errores:</strong> Si el usuario no existe, el servicio
     * puede lanzar una excepci√≥n que ser√° manejada por el controlador de excepciones global.</p>
     *
     * @param userId Identificador √∫nico del usuario a consultar
     * @return {@link ResponseEntity} que contiene la informaci√≥n del usuario solicitado
     * @throws RuntimeException si el usuario no existe o si ocurre un error en el servicio
     * @see UserResponse
     * @see ResponseEntity#ok(Object)
     */
    @GetMapping("/{userId}")
    public ResponseEntity<UserResponse> getUser(@PathVariable int userId) {
        log.info("üîé Consultando usuario con ID: {}", userId);
        UserResponse response = userService.getUser(userId);
        log.info("‚úÖ Usuario encontrado: {}", response.email());
        return ResponseEntity.ok(response);
    }

    /**
     * Actualiza la informaci√≥n personal de un usuario existente en el sistema.
     * 
     * <p>Este endpoint permite modificar los datos de un usuario existente. La operaci√≥n
     * es idempotente y solo actualiza los campos proporcionados en el DTO de actualizaci√≥n.
     * Si la operaci√≥n es exitosa, se devuelve el usuario actualizado junto con un header
     * de ubicaci√≥n que apunta al recurso actualizado.</p>
     * 
     * <p><strong>Validaciones:</strong> El DTO de actualizaci√≥n se valida autom√°ticamente
     * usando las anotaciones de validaci√≥n de Jakarta definidas en {@link UserUpdateRequest}.</p>
     * 
     * <p><strong>Seguridad:</strong> Este endpoint requiere que el usuario autenticado
     * sea el propietario de la cuenta o tenga permisos de administrador.</p>
     * 
     * <p><strong>Headers de respuesta:</strong> Se incluye el header <code>Location</code>
     * que apunta a la URI del recurso actualizado para facilitar futuras consultas.</p>
     *
     * @param id Identificador √∫nico del usuario a actualizar
     * @param userUpdateRequest DTO con los datos actualizados del usuario
     * @return {@link ResponseEntity} que contiene el usuario actualizado y el header Location
     * @throws jakarta.validation.ConstraintViolationException si la validaci√≥n del DTO falla
     * @throws RuntimeException si el usuario no existe o si ocurre un error en el servicio
     * @see UserUpdateRequest
     * @see UserResponse
     * @see ResponseEntity#ok()
     */
    @PutMapping("/{id}")
    public ResponseEntity<UserResponse> updateUser(
            @PathVariable int id,
            @Valid @RequestBody UserUpdateRequest userUpdateRequest) {

        log.info("‚úèÔ∏è Actualizando usuario con ID: {}", id);
        UserResponse response = userService.updateUser(id, userUpdateRequest);

        URI location = ServletUriComponentsBuilder
                .fromCurrentRequest()
                .build()
                .toUri();

        log.info("‚úÖ Usuario actualizado: {}", response.email());
        return ResponseEntity.ok()
                .header(HttpHeaders.LOCATION, location.toString())
                .body(response);
    }

    /**
     * Elimina l√≥gicamente la cuenta de un usuario del sistema.
     * 
     * <p>Este endpoint realiza una eliminaci√≥n l√≥gica del usuario, lo que significa que
     * los datos no se eliminan f√≠sicamente de la base de datos, sino que se marcan como
     * inactivos o eliminados. Esto permite la recuperaci√≥n de cuentas si es necesario.</p>
     * 
     * <p><strong>Seguridad:</strong> Este endpoint puede requere que el usuario autenticado
     * sea el propietario de la cuenta o tenga permisos de administrador, ya que es una
     * operaci√≥n sensible que afecta la disponibilidad de la cuenta.</p>
     * 
     * <p><strong>Respuesta:</strong> Si la operaci√≥n es exitosa, se devuelve un c√≥digo
     * de estado 204 (No Content) sin cuerpo de respuesta, indicando que la operaci√≥n
     * se complet√≥ exitosamente.</p>
     * 
     * <p><strong>Advertencia:</strong> Esta operaci√≥n puede ser irreversible dependiendo
     * de la implementaci√≥n del servicio. Se recomienda confirmar la acci√≥n antes de
     * proceder con la eliminaci√≥n.</p>
     *
     * @param id Identificador √∫nico del usuario a eliminar
     * @return {@link ResponseEntity} sin contenido (c√≥digo 204) si la eliminaci√≥n fue exitosa
     * @throws RuntimeException si el usuario no existe o si ocurre un error en el servicio
     * @see ResponseEntity#noContent()
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable int id) {
        log.info("üóëÔ∏è Eliminando usuario con ID: {}", id);
        userService.deleteUser(id);
        log.info("‚úÖ Usuario con ID: {} eliminado correctamente", id);
        return ResponseEntity.noContent().build();
    }
}
